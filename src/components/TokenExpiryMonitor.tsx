import React, { useEffect, useState } from 'react';
import { useAuth } from 'react-oidc-context';
import { toast } from 'react-toastify';

/**
 * Componente para monitorar a expira√ß√£o do token e mostrar notifica√ß√µes
 */
const TokenExpiryMonitor: React.FC = () => {
    const auth = useAuth();
    const [lastNotification, setLastNotification] = useState<number>(0);

    useEffect(() => {
        if (!auth.isAuthenticated || !auth.user) return;

        const user = auth.user as any;
        const expiresAt = user.expires_at;

        if (!expiresAt) {
            console.log('‚ö†Ô∏è TokenExpiryMonitor - Sem informa√ß√£o de expira√ß√£o');
            return;
        }

        const now = Math.floor(Date.now() / 1000);
        const timeUntilExpiry = expiresAt - now;

        console.log('üîç TokenExpiryMonitor - Informa√ß√µes do token:', {
            expiresAt: new Date(expiresAt * 1000).toLocaleString(),
            timeUntilExpiry: Math.floor(timeUntilExpiry / 60),
            minutesUntilExpiry: Math.floor(timeUntilExpiry / 60)
        });

        // Se o token expira em menos de 5 minutos, mostrar notifica√ß√£o
        if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {
            const now = Date.now();
            // Evitar spam de notifica√ß√µes (m√°ximo 1 por minuto)
            if (now - lastNotification > 60000) {
                const minutesLeft = Math.floor(timeUntilExpiry / 60);
                const secondsLeft = timeUntilExpiry % 60;

                toast.warning(
                    `Sua sess√£o expira em ${minutesLeft > 0 ? `${minutesLeft}m ` : ''}${secondsLeft}s. Renovando automaticamente...`,
                    {
                        autoClose: 5000,
                        position: 'top-right'
                    }
                );

                setLastNotification(now);
                console.log('‚ö†Ô∏è TokenExpiryMonitor - Token expirando em breve');
            }
        }

        // Se o token j√° expirou, mostrar erro
        if (timeUntilExpiry <= 0) {
            toast.error('Sua sess√£o expirou. Redirecionando para login...', {
                autoClose: 3000,
                position: 'top-right'
            });
            console.log('‚ùå TokenExpiryMonitor - Token expirado');
        }

    }, [auth.user, auth.isAuthenticated, lastNotification]);

    // Monitorar eventos de renova√ß√£o do token
    useEffect(() => {
        const handleTokenRenewed = () => {
            console.log('‚úÖ TokenExpiryMonitor - Token renovado com sucesso');
            toast.success('Sess√£o renovada automaticamente', {
                autoClose: 2000,
                position: 'top-right'
            });
        };

        const handleTokenRenewalError = () => {
            console.error('‚ùå TokenExpiryMonitor - Erro na renova√ß√£o do token');
            toast.error('Erro ao renovar sess√£o. Redirecionando para login...', {
                autoClose: 3000,
                position: 'top-right'
            });
        };

        // Escutar eventos do OIDC (se dispon√≠veis)
        if (auth.events) {
            auth.events.addUserLoaded(handleTokenRenewed);
            auth.events.addUserUnloaded(handleTokenRenewalError);
        }

        return () => {
            if (auth.events) {
                auth.events.removeUserLoaded(handleTokenRenewed);
                auth.events.removeUserUnloaded(handleTokenRenewalError);
            }
        };
    }, [auth.events]);

    return null; // Este componente n√£o renderiza nada
};

export default TokenExpiryMonitor;
